Бьёрн Страуструп 	Си
!!! Хекслет		основы командной строки и Введение в гит
!!! stepik.org		Основы программировани на Си. Задачи

!!!!!!!!!!!!!!! язык Си указатели и malloc !!!!!!!!!!!!!!
синтаксис, динамические массивы, структуры, матрицы, строки, бинарные деревья

указатели (или поинтеры, pointers)
malloc (или работа с памятью)
связные списки (linked lists)

рекурсия
	посчитать квадратный корень через рекурсию
		https://i.imgur.com/bEmn12G.png
	является ли число простым
	расставить ферзей на шахматной доске


откройте ваш файл launch.json и добавьте конфигурацию:
miDebuggerArgs": "-q -ex quit; wait() { fg >/dev/null; }; /bin/gdb -q --interpreter=mi






#Первичная настройка GIT
git config --global user.name "Name"	#задать имя пользователя
	--system	#для всех пользователей системы
	--global	#для текущего пользователя системы
	--local		#для текущего репозитория
git config --global user.email "Email"	#задать email пользоввателя

----------

ls -la	#вывести список файлов в каталоге
	-l	#в виде списка
	-a	#показать скрытые файлы

git init	#создать репозиторий GIT

git log		#показать историю изменений
	-p	#показать изменения с подробностями
	--all --graph --oneline --decorate
	Опция --graph выведет график в формате ASCII, отражающий структуру ветвления истории коммитов. В связке с флагами --oneline и --decorate, этот флаг упрощает понимание того, к какой ветке относится каждый коммит.
	Для просмотра истории коммитов по всем веткам используется флаг --all.

git status	#показать статус проекта
	tracked		#файлы под версионным контролем (отслеживаемые)
	untracked	#файлы не под версионным контролем (неотслеживаемые)
	modified	#файл изменен, но не добавлен в коммит
	committed	#файл добавлен в коммит (зафиксирован)
	staged		#файл подготовлен к коммиту (добавлен в индекс)

git add <file_name>	#добавить файл в индекс

git commit -m "Init commit"	#создать коммит
	-m	#добавить комментарий к коммиту
	-a	#добавить файлы в индекс

git show <object>	#показать подробности объекта

git restore	#откат изменений до состояния последнего коммита
	--staged	#откат изменений в индексе

git diff	#показать внесенные изменения с момента последнего коммита
	--staged	#показать изменения добавленные в индекс

git mv <file_name>	#переместить или переименовать файл

git rm <file_name>	#удалить файл
	--cached	#удалить файл из индекса, но оставить в каталоге

vim .gitignore	#перечислить файлы, которые не нужно коммитить и добавить .gitignore в коммит

----------

git branch -a	#показать список веток
	-d <name>	#удалить ветку

git branch <name>	#создать новую ветку

git checkout <name>	#перейти на ветку

git merge	#слияние веток


git clean -fd	# Выполняем очистку. Команда удалит все незакоммиченные изменения
	-f – force
	-d – directory



# Создание ssh-ключей
ssh-keygen -t ed25519  -C "your_email@example.com"
# Дальше будет несколько вопросов. На все вопросы нужно нажимать Enter.

# Запуск агента ssh, который следит за ключами
eval "$(ssh-agent -s)"

# Добавления нового ssh-ключа в агент
ssh-add ~/.ssh/id_ed25519